This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: ./package-lock.json, ./src-tauri/Cargo.lock, ./.prettierrc, .prettierignore, ./repomix.config.json, ./repomix-output.xml
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
.repomixignore
docs/planning.md
drizzle.config.ts
eslint.config.js
package.json
postcss.config.cjs
public/tauri.svg
public/vite.svg
README.md
src-tauri/.gitignore
src-tauri/build.rs
src-tauri/capabilities/default.json
src-tauri/capabilities/desktop.json
src-tauri/Cargo.toml
src-tauri/migrations/0000_normal_stepford_cuckoos.sql
src-tauri/migrations/meta/_journal.json
src-tauri/migrations/meta/0000_snapshot.json
src-tauri/migrations/migrations.js
src-tauri/src/lib.rs
src-tauri/src/main.rs
src-tauri/tauri.conf.json
src/app-entry.tsx
src/app.html
src/app/dashboard.tsx
src/app/dbtest.tsx
src/assets/Atkinson.css
src/assets/react.svg
src/assets/test.css
src/common-entry.tsx
src/common/widgets/BaseWidget.tsx
src/common/widgets/CounterWidget.tsx
src/db/db.ts
src/db/schema.ts
src/dialog-entry.tsx
src/dialog.html
src/dialog/dialog.tsx
src/emotion.d.ts
src/vite-env.d.ts
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".repomixignore">
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/
</file>

<file path="docs/planning.md">
# ECHO Development Task List

## âœ… Basic Setup
- [x] Set up Tauri V2 project with React and Mantine
- [x] Configure SQLite via Tauri SQLX plugin
- [x] Integrate Drizzle ORM with SQLX including migrations

## ðŸŽ¨ Layout & Design
- [x] Build base UI structure (main window, header, sidebar, etc.)
- [ ] create tab layout with custom tab component
- [ ] Create modular layout system for widgets

## ðŸ’¬ Core Features
- [ ] Add Flash-based AI chat integration
- [ ] Display and store chat history in database
- [ ] Enable syncing between AI output and UI
- [ ] Handle input states, errors, and edge cases
- [ ] Add local settings panel (UI + persistence)

## ðŸ§  Project & Task Management
- [ ] Design project + task data structure
- [ ] Build UI to create and manage projects
- [ ] Support auto-generating subtasks from goal text
- [ ] Track task completion and show progress
- [ ] Persist project/task data in SQLite

## ðŸ§© Widgets & Extensions
- [ ] Create calendar widget
- [ ] Add task/reminder widget with simple scheduling
- [ ] Allow toggling widgets from settings
- [ ] Store widget preferences and layout persistently

## ðŸ“¸ Media & Input
- [ ] Add screenshot capture (window or region)
- [ ] Enable audio recording from mic
- [ ] Support pasting YouTube/video links with preview
- [ ] Connect screenshot input to vision model (basic flow)
- [ ] (Optional) Extract data or summaries from pasted media

## ðŸš€ Extra / Advanced
- [ ] Investigate background reminders with Windows alarm/timer API
- [ ] Implement cross-platform native notification scheduling
- [ ] Add system tray integration (if needed for background tasks)
- [ ] Explore AI-assisted commands (e.g. "remind me in 10 min")
- [ ] Implement Mac-style open/close window buttons
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="drizzle.config.ts">
import { defineConfig } from "drizzle-kit";
export default defineConfig({
    dialect: "sqlite",
    schema: "./src/db/schema.ts",
    driver: "durable-sqlite",
    verbose: false,
    strict: true,
    out: "./src-tauri/migrations",
});
</file>

<file path="postcss.config.cjs">
module.exports = {
  plugins: {
    'postcss-preset-mantine': {},
    'postcss-simple-vars': {
      variables: {
        'mantine-breakpoint-xs': '36em',
        'mantine-breakpoint-sm': '48em',
        'mantine-breakpoint-md': '62em',
        'mantine-breakpoint-lg': '75em',
        'mantine-breakpoint-xl': '88em',
      },
    },
  },
};
</file>

<file path="public/tauri.svg">
<svg width="206" height="231" viewBox="0 0 206 231" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M143.143 84C143.143 96.1503 133.293 106 121.143 106C108.992 106 99.1426 96.1503 99.1426 84C99.1426 71.8497 108.992 62 121.143 62C133.293 62 143.143 71.8497 143.143 84Z" fill="#FFC131"/>
<ellipse cx="84.1426" cy="147" rx="22" ry="22" transform="rotate(180 84.1426 147)" fill="#24C8DB"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M166.738 154.548C157.86 160.286 148.023 164.269 137.757 166.341C139.858 160.282 141 153.774 141 147C141 144.543 140.85 142.121 140.558 139.743C144.975 138.204 149.215 136.139 153.183 133.575C162.73 127.404 170.292 118.608 174.961 108.244C179.63 97.8797 181.207 86.3876 179.502 75.1487C177.798 63.9098 172.884 53.4021 165.352 44.8883C157.82 36.3744 147.99 30.2165 137.042 27.1546C126.095 24.0926 114.496 24.2568 103.64 27.6274C92.7839 30.998 83.1319 37.4317 75.8437 46.1553C74.9102 47.2727 74.0206 48.4216 73.176 49.5993C61.9292 50.8488 51.0363 54.0318 40.9629 58.9556C44.2417 48.4586 49.5653 38.6591 56.679 30.1442C67.0505 17.7298 80.7861 8.57426 96.2354 3.77762C111.685 -1.01901 128.19 -1.25267 143.769 3.10474C159.348 7.46215 173.337 16.2252 184.056 28.3411C194.775 40.457 201.767 55.4101 204.193 71.404C206.619 87.3978 204.374 103.752 197.73 118.501C191.086 133.25 180.324 145.767 166.738 154.548ZM41.9631 74.275L62.5557 76.8042C63.0459 72.813 63.9401 68.9018 65.2138 65.1274C57.0465 67.0016 49.2088 70.087 41.9631 74.275Z" fill="#FFC131"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M38.4045 76.4519C47.3493 70.6709 57.2677 66.6712 67.6171 64.6132C65.2774 70.9669 64 77.8343 64 85.0001C64 87.1434 64.1143 89.26 64.3371 91.3442C60.0093 92.8732 55.8533 94.9092 51.9599 97.4256C42.4128 103.596 34.8505 112.392 30.1816 122.756C25.5126 133.12 23.9357 144.612 25.6403 155.851C27.3449 167.09 32.2584 177.598 39.7906 186.112C47.3227 194.626 57.153 200.784 68.1003 203.846C79.0476 206.907 90.6462 206.743 101.502 203.373C112.359 200.002 122.011 193.568 129.299 184.845C130.237 183.722 131.131 182.567 131.979 181.383C143.235 180.114 154.132 176.91 164.205 171.962C160.929 182.49 155.596 192.319 148.464 200.856C138.092 213.27 124.357 222.426 108.907 227.222C93.458 232.019 76.9524 232.253 61.3736 227.895C45.7948 223.538 31.8055 214.775 21.0867 202.659C10.3679 190.543 3.37557 175.59 0.949823 159.596C-1.47592 143.602 0.768139 127.248 7.41237 112.499C14.0566 97.7497 24.8183 85.2327 38.4045 76.4519ZM163.062 156.711L163.062 156.711C162.954 156.773 162.846 156.835 162.738 156.897C162.846 156.835 162.954 156.773 163.062 156.711Z" fill="#24C8DB"/>
</svg>
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# Tauri + React + Typescript

This template should help get you started developing with Tauri, React and Typescript in Vite.

## Recommended IDE Setup

- [VS Code](https://code.visualstudio.com/) + [Tauri](https://marketplace.visualstudio.com/items?itemName=tauri-apps.tauri-vscode) + [rust-analyzer](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer)
</file>

<file path="src-tauri/.gitignore">
# Generated by Cargo
# will have compiled files and executables
/target/

# Generated by Tauri
# will have schema files for capabilities auto-completion
/gen/schemas
</file>

<file path="src-tauri/build.rs">
fn main() {
    tauri_build::build()
}
</file>

<file path="src-tauri/migrations/0000_normal_stepford_cuckoos.sql">
CREATE TABLE `users` (
	`id` integer PRIMARY KEY AUTOINCREMENT NOT NULL,
	`name` text,
	`age` integer,
	`created_at` text DEFAULT CURRENT_TIMESTAMP
);
</file>

<file path="src-tauri/migrations/meta/_journal.json">
{
  "version": "7",
  "dialect": "sqlite",
  "entries": [
    {
      "idx": 0,
      "version": "6",
      "when": 1746280567310,
      "tag": "0000_normal_stepford_cuckoos",
      "breakpoints": true
    }
  ]
}
</file>

<file path="src-tauri/migrations/meta/0000_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "215b9005-5713-4dc8-b6eb-5a0d1ad12151",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "tables": {
    "users": {
      "name": "users",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        },
        "age": {
          "name": "age",
          "type": "integer",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        },
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false,
          "default": "CURRENT_TIMESTAMP"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="src-tauri/migrations/migrations.js">
import journal from './meta/_journal.json';
import m0000 from './0000_normal_stepford_cuckoos.sql';
  export default {
    journal,
    migrations: {
      m0000
    }
  }
</file>

<file path="src-tauri/src/main.rs">
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]
fn main() {
    ekko_lib::run()
}
</file>

<file path="src/app.html">
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/vite.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Ekko App</title>
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/app-entry.tsx"></script>
</body>
</html>
</file>

<file path="src/app/dashboard.tsx">
import "@mantine/core/styles/global.css";
import "@mantine/core/styles.css";
import "../assets/Atkinson.css";
import "/node_modules/react-grid-layout/css/styles.css";
import "/node_modules/react-resizable/css/styles.css";
import { Layouts, Responsive, WidthProvider } from "react-grid-layout";
import "../assets/test.css";
import { ScrollArea } from "@mantine/core";
import { CounterWidget } from "@/common/widgets/CounterWidget";
import { useState } from "react";
const ResponsiveGridLayout = WidthProvider(Responsive);
export function Dashboard() {
    const [layouts, setLayouts] = useState<Layouts>({
        lg: [{ i: "counter", x: 6, y: 1, w: 3, h: 3 }],
    });
    return (
        <ScrollArea
            style={{
                flex: 1,
            }}
        >
            <ResponsiveGridLayout
                onLayoutChange={() => setLayouts(layouts)}
                layouts={layouts}
                compactType={null}
                breakpoints={{ lg: 1200 }}
                cols={{ lg: 12 }}
                rowHeight={80}
                draggableHandle=".drag-handle"
                autoSize={false}
                style={{ minHeight: "100%" }}
            >
                <CounterWidget key="counter" />
            </ResponsiveGridLayout>
        </ScrollArea>
    );
}
</file>

<file path="src/app/dbtest.tsx">
import { db } from "@/db/db";
import { Box, Button, Divider, Title } from "@mantine/core";
import { useState } from "react";
import { users } from "@/db/schema";
async function getUsers() {
    const data = await db.select().from(users);
    console.log(data);
    return data;
}
async function addUser() {
    const randInt = Math.floor(Math.random() * 1000);
    await db.insert(users).values({ name: "John Doe", age: randInt });
}
export function DbTest() {
    const [users, setUsers] = useState<any[]>([]);
    return (
        <Box>
            <Title>Users</Title>
            <ul>
                {users.map((user) => (
                    <li key={user.id}>
                        {user.name} - {user.age}
                    </li>
                ))}
            </ul>
            <Button onClick={async () => setUsers(await getUsers())}>
                Get Users
            </Button>
            <Divider />
            <Button onClick={async () => addUser()}>Create User</Button>
        </Box>
    );
}
</file>

<file path="src/assets/Atkinson.css">
@font-face {
    font-family: 'Atkinson Hyperlegible';
    src: url('./AtkinsonHyperlegible-Regular.ttf') format('truetype');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
  }
  @font-face {
    font-family: 'Atkinson Hyperlegible';
    src: url('./AtkinsonHyperlegible-Italic.ttf') format('truetype');
    font-weight: 400;
    font-style: italic;
    font-display: swap;
  }
  @font-face {
    font-family: 'Atkinson Hyperlegible';
    src: url('./AtkinsonHyperlegible-Bold.ttf') format('truetype');
    font-weight: 700;
    font-style: normal;
    font-display: swap;
  }
  @font-face {
    font-family: 'Atkinson Hyperlegible';
    src: url('./AtkinsonHyperlegible-BoldItalic.ttf') format('truetype');
    font-weight: 700;
    font-style: italic;
    font-display: swap;
  }
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/db/db.ts">
import { drizzle } from "drizzle-orm/sqlite-proxy";
import Database from "@tauri-apps/plugin-sql";
import * as schema from "./schema";
import { readDir, readTextFile } from "@tauri-apps/plugin-fs";
import { resourceDir } from "@tauri-apps/api/path";
async function getSqliteDb() {
    return await Database.load("sqlite:app.db");
}
let migrationsDone = false;
export async function migrate(sqlite: Database) {
    if (migrationsDone) return;
    migrationsDone = true;
    const resourcePath = await resourceDir();
    const files = await readDir(`${resourcePath}/migrations`);
    let migrations = files.filter((file) => file.name?.endsWith(".sql"));
    migrations = migrations.sort((a, b) => {
        const aHash = a.name?.replace(".sql", "").slice(0, 4);
        const bHash = b.name?.replace(".sql", "").slice(0, 4);
        if (aHash && bHash) {
            return aHash.localeCompare(bHash);
        }
        return 0;
    });
    const migrationTableCreate = /*sql*/ `
          CREATE TABLE IF NOT EXISTS "__drizzle_migrations" (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              hash text NOT NULL UNIQUE,
              created_at numeric
          )
      `;
    await sqlite.execute(migrationTableCreate, []);
    console.log(migrations);
    for (const migration of migrations) {
        const hash = migration.name?.replace(".sql", "");
        const dbMigrations = (await sqlite.select(
            /*sql*/ `SELECT id, hash, created_at FROM "__drizzle_migrations" ORDER BY created_at DESC`,
        )) as unknown as { id: number; hash: string; created_at: number }[];
        const hasBeenRun = (hash: string) =>
            dbMigrations.find((dbMigration) => {
                return dbMigration?.hash === hash;
            });
        if (hash && hasBeenRun(hash) === undefined) {
            const sql = await readTextFile(
                `${resourcePath}/migrations/${migration.name}`,
            );
            const r2 = await sqlite.execute(
                 `INSERT INTO "__drizzle_migrations" (hash, created_at) VALUES ($1, $2)`,
                [hash, Date.now()],
            );
            const r1 = await sqlite.execute(sql, []);
            console.log(r1, r2);
        }
    }
    console.info("Migrations complete");
    return Promise.resolve();
}
export async function prepareDb() {
    console.log("prepareDb");
    const sqlite = await getSqliteDb();
    await migrate(sqlite);
}
export const db = drizzle<typeof schema>(async (sql, params, method) => {
    const sqlite = await getSqliteDb();
    if (method === "all" || method === "get") {
        const resultObjects = await sqlite.select(sql, params);
        const rows = (resultObjects as object[]).map((obj) =>
            Object.values(obj).map((val) => String(val)),
        );
        return method === "get" ? { rows: rows[0] || [] } : { rows };
    }
    await sqlite.execute(sql, params);
    return { rows: [] };
});
</file>

<file path="src/db/schema.ts">
import { sqliteTable, text, integer } from "drizzle-orm/sqlite-core";
import { sql } from "drizzle-orm";
export const users = sqliteTable("users", {
    id: integer("id").primaryKey({ autoIncrement: true }),
    name: text("name"),
    age: integer("age"),
    created_at: text("created_at").default(sql`CURRENT_TIMESTAMP`),
});
</file>

<file path="src/dialog.html">
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Ekko Dialog</title>
    <style>
        html,
        body {
            background: transparent;
        }
    </style>
</head>
<body>
    <div id="root" style="min-height: 100vh;"></div>
    <script type="module" src="/src/dialog-entry.tsx"></script>
</body>
</html>
</file>

<file path="src/dialog/dialog.tsx">
import { useEffect, useState } from "react";
import { getCurrentWindow, LogicalSize } from "@tauri-apps/api/window";
import { getCurrentWebviewWindow } from "@tauri-apps/api/webviewWindow";
function App() {
    const [expanded, setExpanded] = useState(false);
    useEffect(() => {
        const currWindow = getCurrentWindow();
        const unlisten = currWindow.onFocusChanged(({ payload: focused }) => {
            console.log("Focus changed, window is focused? " + focused);
            if (!focused) {
                console.log("Window is not focused, closing");
            }
        });
        unlisten.then((unlisten) => {
            return () => {
                unlisten();
            };
        });
    }, []);
    return (
        <main className="container">
            <form
                className="row"
                onSubmit={async (e) => {
                    e.preventDefault();
                    const currWindow = getCurrentWebviewWindow();
                    const baseSize = await currWindow.size();
                    setExpanded(!expanded);
                    for (let i = 0; i < 10; i++) {
                        await currWindow.setSize(
                            new LogicalSize(
                                baseSize.width,
                                baseSize.height + 50 * i * (expanded ? -1 : 1),
                            ),
                        );
                    }
                }}
            >
                <input placeholder="Enter message" />
                <button type="submit">Run</button>
            </form>
            {expanded && <hr></hr>}
        </main>
    );
}
export default App;
</file>

<file path="src/emotion.d.ts">
import '@mantine/core';
import type { EmotionStyles, EmotionSx } from '@mantine/emotion';
declare module '@mantine/core' {
  export interface BoxProps {
    sx?: EmotionSx;
    styles?: EmotionStyles;
  }
}
</file>

<file path="src/vite-env.d.ts">

</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="src/assets/test.css">
.react-grid-placeholder {
    background-color: rgba(1, 0, 0, 0.1);
    border: 2px solid #888;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    border-radius: 10pt;
    color: blue;
}
.react-grid-item.react-grid-placeholder {
    background-color: rgba(1, 0, 0, 0.1);
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
</file>

<file path="eslint.config.js">
import react from "eslint-plugin-react";
import typescriptParser from "@typescript-eslint/parser";
import js from "@eslint/js";
import globals from "globals";
export default [
    {
        plugins: {
            react,
        },
        files: ["src/**/*.{jsx,tsx}"],
        languageOptions: {
            parser: typescriptParser,
            globals: {
                ...globals.browser,
            },
            parserOptions: {
                ecmaFeatures: {
                    jsx: true,
                },
                ecmaVersion: "latest",
                sourceType: "module",
                project: ["./tsconfig.json"],
            },
        },
        settings: {
            react: {
                version: "18.3",
            },
        },
        rules: {
            ...js.configs.recommended.rules,
            ...react.configs.recommended.rules,
            ...react.configs["jsx-runtime"].rules,
            "react/react-in-jsx-scope": "off",
            "react/jsx-uses-react": "off",
        },
    },
    {
        files: ["src/**/*.{js,ts}"],
        languageOptions: {
            parser: typescriptParser,
            globals: {
                ...globals.browser,
            },
            parserOptions: {
                ecmaVersion: "latest",
                sourceType: "module",
                project: ["./tsconfig.json"],
            },
        },
        rules: {
            ...js.configs.recommended.rules,
        },
    },
];
</file>

<file path="src-tauri/capabilities/desktop.json">
{
  "identifier": "desktop-capability",
  "platforms": [
    "macOS",
    "windows",
    "linux"
  ],
  "windows": [
    "main",
    "dlg"
  ],
  "permissions": [
    "global-shortcut:default"
  ]
}
</file>

<file path="src/common/widgets/BaseWidget.tsx">
import React from "react";
import { Box, Paper, Text } from "@mantine/core";
export type BaseWidgetProps = {
    title: string;
    children: React.ReactNode;
    style?: React.CSSProperties;
    className?: string;
    onMouseDown?: React.MouseEventHandler;
    onMouseUp?: React.MouseEventHandler;
    onTouchEnd?: React.TouchEventHandler;
};
export const BaseWidget = React.forwardRef<HTMLDivElement, BaseWidgetProps>(
    (
        {
            children,
            style,
            className,
            onMouseDown,
            onMouseUp,
            onTouchEnd,
            title,
        },
        ref,
    ) => (
        <Box
            ref={ref}
            sx={(theme) => {
                return {
                    border: `1px solid ${theme.colors.dark[4]}`,
                    borderRadius: 10,
                    height: "100%",
                    width: "100%",
                    ...style,
                };
            }}
            className={className}
            onMouseDown={onMouseDown}
            onMouseUp={onMouseUp}
            onTouchEnd={onTouchEnd}
        >
            <Paper
                bg="dark.6"
                style={{
                    borderTopLeftRadius: 10,
                    borderTopRightRadius: 10,
                    height: 30,
                }}
                className="drag-handle"
            >
                <Text
                    ml={"md"}
                    fw={700}
                    style={{
                        userSelect: "none",
                    }}
                    pt={2}
                >
                    {title}
                </Text>
            </Paper>
            <Box m={20}>{children}</Box>
        </Box>
    ),
);
BaseWidget.displayName = "BaseWidget";
</file>

<file path="src/dialog-entry.tsx">
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./dialog/dialog";
import { TrayIcon } from "@tauri-apps/api/tray";
import {
    isRegistered,
    register,
    unregister,
} from "@tauri-apps/plugin-global-shortcut";
import { Menu } from "@tauri-apps/api/menu";
import { getCurrentWebviewWindow } from "@tauri-apps/api/webviewWindow";
import { LogicalPosition } from "@tauri-apps/api/dpi";
import { platform } from "@tauri-apps/plugin-os";
let vis = true;
async function toggleVisibility() {
    const currWindow = getCurrentWebviewWindow();
    if (!vis) {
        await currWindow.center();
        await currWindow.requestUserAttention(null);
    } else {
        await currWindow.setPosition(new LogicalPosition(1e6, 1e6));
    }
    vis = !vis;
}
function setupWindow() {
    const currWindow = getCurrentWebviewWindow();
    currWindow.setAlwaysOnTop(true);
    currWindow.setDecorations(false);
    currWindow.setSkipTaskbar(true);
}
async function setupTray() {
    const tray = await TrayIcon.new({
        id: "ekko",
        icon: "icons/logo-small.png",
        tooltip: "Ekko",
    });
    tray.setShowMenuOnLeftClick(true);
    const menu = await Menu.new({
        items: [
            {
                id: "open",
                text: "Open App",
                action: () => {
                    console.log("open pressed");
                },
            },
            {
                id: "dlg",
                text: "Open Dialog",
                action: () => {
                    console.log("open dialog pressed");
                    toggleVisibility();
                },
            },
            {
                id: "close",
                text: "Close App",
                action: () => {
                    console.log("close pressed");
                },
            },
        ],
    });
    tray.setMenu(menu);
    const currWindow = getCurrentWebviewWindow();
    currWindow.onCloseRequested(async () => {
        await tray.close();
    });
}
async function registerShortcut() {
    const currWindow = getCurrentWebviewWindow();
    const p = await platform();
    if (p == "macos") {
    } else {
        const isReg = await isRegistered("F22");
        if (!isReg) {
            await register("F22", async (event) => {
                if (event.state == "Pressed") await toggleVisibility();
            });
        }
        currWindow.onCloseRequested(async () => {
            unregister("F22").then(() => {
                console.log("unregistered F22");
            });
        });
    }
}
async function init() {
    setupWindow();
    await setupTray();
    await registerShortcut();
}
await init();
ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
);
</file>

<file path="src-tauri/Cargo.toml">
[package]
name = "ekko"
version = "0.1.0"
description = "A Tauri App"
authors = ["you"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
# The `_lib` suffix may seem redundant but it is necessary
# to make the lib name unique and wouldn't conflict with the bin name.
# This seems to be only an issue on Windows, see https://github.com/rust-lang/cargo/issues/8519
name = "ekko_lib"
crate-type = ["staticlib", "cdylib", "rlib"]

[build-dependencies]
tauri-build = { version = "2", features = [] }

[dependencies]
tauri = { version = "2", features = ["tray-icon", "image-png"] }
tauri-plugin-opener = "2"
tauri-plugin-os = "2.0.0"
serde = { version = "1", features = ["derive"] }
serde_json = "1"
window-vibrancy = "0.6.0"
global-hotkey = "0.6.4"
tauri-plugin-sql = { version = "2", features = ["sqlite"] }
tauri-plugin-fs = "2"

[target.'cfg(not(any(target_os = "android", target_os = "ios")))'.dependencies]
tauri-plugin-global-shortcut = "2"
</file>

<file path="src/common-entry.tsx">
import React from "react";
import ReactDOM from "react-dom/client";
import { MantineProvider, MantineThemeOverride } from "@mantine/core";
import { emotionTransform, MantineEmotionProvider } from "@mantine/emotion";
import "@mantine/core/styles/global.css";
import "@mantine/core/styles.css";
import "./assets/Atkinson.css";
import { prepareDb } from "./db/db";
type AppConfig = {
    rootElementId: string;
    MainLayout: React.FC;
    theme?: MantineThemeOverride;
    forceColorScheme?: "light" | "dark";
};
export async function createApp({
    rootElementId = "root",
    MainLayout,
    theme = {
        colors: {
            dark: [
                "#C1C2C5",
                "#A6A7AB",
                "#909296",
                "#5c5f66",
                "#373A40",
                "#2C2E33",
                "#25262b",
                "#1A1B1E",
                "#141517",
                "#101113",
            ],
        },
        fontFamily: "Atkinson Hyperlegible",
        fontFamilyMonospace: "Monaco, Courier, monospace",
        primaryColor: "indigo",
    },
    forceColorScheme = "dark",
}: AppConfig) {
    const rootElement = document.getElementById(rootElementId);
    if (!rootElement) {
        throw new Error(`Root element with id "${rootElementId}" not found.`);
    }
    {
        await prepareDb();
    }
    ReactDOM.createRoot(rootElement).render(
        <React.StrictMode>
            <MantineProvider
                theme={theme}
                forceColorScheme={forceColorScheme}
                stylesTransform={emotionTransform}
            >
                <MantineEmotionProvider>
                    <MainLayout />
                </MantineEmotionProvider>
            </MantineProvider>
        </React.StrictMode>,
    );
}
</file>

<file path="src/common/widgets/CounterWidget.tsx">
import React, { useState } from "react";
import { Button, Text } from "@mantine/core";
import { BaseWidget, BaseWidgetProps } from "./BaseWidget";
import { AnimatePresence, motion } from "motion/react";
type CounterWidgetProps = Omit<Omit<BaseWidgetProps, "children">, "title">;
export const CounterWidget = React.forwardRef<
    HTMLDivElement,
    CounterWidgetProps
>((props, ref) => {
    const [count, setCount] = useState(0);
    const [isVisible, setIsVisible] = useState(false);
    const toggle = () => setIsVisible((v) => !v);
    return (
        <BaseWidget title="React Counter" {...props} ref={ref}>
            <Text>Current count: {count}</Text>
            <Button onClick={toggle}>Increment</Button>
            <AnimatePresence>
                {isVisible && (
                    <motion.div
                        key="modal"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                    >
                        I fade in & out
                    </motion.div>
                )}
            </AnimatePresence>
        </BaseWidget>
    );
});
CounterWidget.displayName = "CounterWidget";
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
const host = process.env.TAURI_DEV_HOST;
export default defineConfig(async () => ({
    plugins: [react()],
    resolve: {
        alias: {
            "@": path.resolve(__dirname, "./src"),
            "@tabler/icons-react":
                "@tabler/icons-react/dist/esm/icons/index.mjs",
        },
    },
    clearScreen: false,
    server: {
        port: 1420,
        strictPort: true,
        host: host || false,
        hmr: host
            ? {
                  protocol: "ws",
                  host,
                  port: 1421,
              }
            : undefined,
        watch: {
            ignored: ["**/src-tauri/**"],
        },
    },
}));
</file>

<file path="src-tauri/src/lib.rs">
use tauri::Manager;
use window_vibrancy::*;
#[tauri::command]
fn greet(name: &str) -> String {
    format!("Hello, {}! You've been greeted from Rust!", name)
}
#[tauri::command]
fn logger(msg: String) {
    println!("{}", msg);
}
#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    tauri::Builder::default()
        .plugin(tauri_plugin_fs::init())
        .plugin(tauri_plugin_sql::Builder::new().build())
        .plugin(tauri_plugin_global_shortcut::Builder::new().build())
        .plugin(tauri_plugin_os::init())
        .plugin(tauri_plugin_opener::init())
        .plugin(tauri_plugin_sql::Builder::default().build())
        .invoke_handler(tauri::generate_handler![greet])
        .invoke_handler(tauri::generate_handler![logger])
        .setup(|app| {
            let window = app.get_webview_window("main").unwrap();
            #[cfg(target_os = "macos")]
            apply_vibrancy(&window, NSVisualEffectMaterial::HudWindow, None, None)
                .expect("Unsupported platform! 'apply_vibrancy' is only supported on macOS");
            #[cfg(target_os = "windows")]
            apply_acrylic(&window, Some((255, 0, 0, 255)))
                .expect("Unsupported platform! 'apply_blur' is only supported on Windows");
            Ok(())
        })
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
</file>

<file path="src/app-entry.tsx">
import { createApp } from "./common-entry";
import {
    Flex,
    Tabs,
    ActionIcon,
    Group,
    Box,
    Text,
    MantineStyleProp,
} from "@mantine/core";
import { getCurrentWindow } from "@tauri-apps/api/window";
import { useEffect, useState } from "react";
import { AnimatePresence } from "motion/react";
createApp({
    rootElementId: "root",
    MainLayout: App,
});
import {
    IconMaximize,
    IconMinimize,
    IconPin,
    IconPinFilled,
    IconX,
} from "@tabler/icons-react";
import { Dashboard } from "./app/dashboard";
const currentWindow = getCurrentWindow();
function TitleBar() {
    const [pinned, setPinned] = useState(false);
    const togglePin = () => {
        setPinned(!pinned);
        currentWindow.setAlwaysOnTop(!pinned);
    };
    useEffect(() => {
        currentWindow.setAlwaysOnTop(pinned);
    }, []);
    return (
        <Flex align="center" data-tauri-drag-region>
            <Box
                data-tauri-drag-region
                sx={{
                    flex: 1,
                    display: "flex",
                    justifyContent: "flex-start",
                }}
            >
                <ActionIcon mt="sm" ml="sm" onClick={togglePin}>
                    {pinned ? (
                        <IconPinFilled
                            style={{ width: "70%", height: "70%" }}
                            stroke={1.5}
                        />
                    ) : (
                        <IconPin
                            style={{ width: "70%", height: "70%" }}
                            stroke={1.5}
                        />
                    )}
                </ActionIcon>
            </Box>
            <Group data-tauri-drag-region>
                <Text
                    data-tauri-drag-region
                    style={{
                        userSelect: "none",
                    }}
                    fw={700}
                    size="xl"
                    variant="gradient"
                    gradient={{ from: "indigo", to: "blue", deg: 90 }}
                >
                    Ekko v0.1.0
                </Text>
            </Group>
            <Box
                data-tauri-drag-region
                sx={{
                    flex: 1,
                    display: "flex",
                    justifyContent: "flex-end",
                }}
            >
                <ActionIcon
                    mt="sm"
                    mr="sm"
                    onClick={() => currentWindow.minimize()}
                >
                    <IconMinimize
                        style={{ width: "70%", height: "70%" }}
                        stroke={1.5}
                    />
                </ActionIcon>
                <ActionIcon
                    mt="sm"
                    mr="sm"
                    onClick={async () => {
                        const max = await currentWindow.isMaximized();
                        console.log(max);
                        max
                            ? currentWindow.unmaximize()
                            : currentWindow.maximize();
                    }}
                >
                    <IconMaximize
                        style={{ width: "70%", height: "70%" }}
                        stroke={1.5}
                    />
                </ActionIcon>
                <ActionIcon
                    mt="sm"
                    mr="sm"
                    onClick={() => currentWindow.close()}
                >
                    <IconX
                        style={{ width: "70%", height: "70%" }}
                        stroke={1.5}
                    />
                </ActionIcon>
            </Box>
        </Flex>
    );
}
import { keyframes } from "@mantine/emotion";
import { DbTest } from "./app/dbtest";
const fadeIn = keyframes({
    from: { opacity: 0 },
    to: { opacity: 1 },
});
const panelStyle: MantineStyleProp = {
    flex: 1,
    display: "flex",
    flexDirection: "column",
    flexGrow: 1,
    animation: `${fadeIn} 5000ms ease-out`,
};
function App() {
    const [activeTab, setActiveTab] = useState<string | null>("first");
    return (
        <Flex h={"100vh"} mah={"100vh"} direction={"column"}>
            <TitleBar />
            <Tabs
                style={{
                    flex: 1,
                    display: "flex",
                    flexDirection: "column",
                }}
                value={activeTab}
                onChange={setActiveTab}
                inverted
                keepMounted={false}
            >
                <Tabs.Panel style={panelStyle} value="first">
                    <Dashboard />
                </Tabs.Panel>
                <AnimatePresence>
                    <Tabs.Panel style={panelStyle} value="second">
                        <DbTest />
                    </Tabs.Panel>
                </AnimatePresence>
                <Tabs.List>
                    <Tabs.Tab value="first">Dashboard</Tabs.Tab>
                    <Tabs.Tab value="second">Options</Tabs.Tab>
                </Tabs.List>
            </Tabs>
        </Flex>
    );
}
</file>

<file path="src-tauri/capabilities/default.json">
{
  "$schema": "../gen/schemas/desktop-schema.json",
  "identifier": "default",
  "description": "Capability for the main window",
  "windows": ["main", "dlg"],
  "permissions": [
    "core:default",
    "opener:default",
    "core:event:allow-emit",
    "core:event:allow-listen",
    "core:webview:allow-webview-close",
    "global-shortcut:allow-is-registered",
    "global-shortcut:allow-register",
    "global-shortcut:allow-unregister",
    "core:window:allow-close",
    "core:window:allow-hide",
    "core:window:allow-show",
    "core:window:allow-set-focus",
    "core:window:allow-set-skip-taskbar",
    "core:window:allow-set-always-on-bottom",
    "core:window:allow-set-always-on-top",
    "core:window:allow-set-position",
    "core:window:allow-minimize",
    "core:window:allow-unminimize",
    "core:window:allow-set-size",
    "core:window:allow-start-dragging",
    "core:window:allow-start-resize-dragging",
    "core:window:allow-maximize",
    "core:window:allow-unmaximize",
    "sql:default",
    "sql:allow-execute",
    "fs:default",
    "fs:allow-resource-read-recursive",
    {
      "identifier": "fs:scope",
      "allow": [{ "path": "$APPDATA" }, { "path": "$APPDATA/**" }]
    }
    ]
}
</file>

<file path="src-tauri/tauri.conf.json">
{
  "$schema": "https://schema.tauri.app/config/2",
  "productName": "ekko",
  "version": "0.1.0",
  "identifier": "de.ekko.ai",
  "build": {
    "beforeDevCommand": "npm run dev",
    "devUrl": "http://localhost:1420",
    "beforeBuildCommand": "npm run build",
    "frontendDist": "../dist"
  },
  "app": {
    "windows": [
      {
        "label": "main",
        "title": "ekko",
        "width": 500,
        "height": 500,
        "decorations": false,
        "url": "src/app.html"
      }
    ],
    "security": {
      "csp": null
    }
  },
  "bundle": {
    "active": true,
    "targets": "all",
    "icon": [
      "icons/32x32.png",
      "icons/128x128.png",
      "icons/128x128@2x.png",
      "icons/icon.icns",
      "icons/icon.ico"
    ],
    "resources": ["./migrations/*"]
    
  },
  "plugins": {
    "sql": {
      "preload": ["sqlite:app.db"]
    }
  }
  
}
</file>

<file path="package.json">
{
    "name": "ekko",
    "private": true,
    "version": "0.1.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "preview": "vite preview",
        "tauri": "tauri"
    },
    "dependencies": {
        "@emotion/cache": "^11.14.0",
        "@emotion/react": "^11.14.0",
        "@emotion/serialize": "^1.3.3",
        "@emotion/utils": "^1.4.2",
        "@mantine/core": "^7.17.4",
        "@mantine/emotion": "^7.17.4",
        "@mantine/hooks": "^7.17.4",
        "@tabler/icons-react": "^3.31.0",
        "@tauri-apps/api": "^2",
        "@tauri-apps/plugin-fs": "^2.2.1",
        "@tauri-apps/plugin-global-shortcut": "^2.2.0",
        "@tauri-apps/plugin-opener": "^2",
        "@tauri-apps/plugin-os": "^2.2.1",
        "@tauri-apps/plugin-sql": "^2.2.0",
        "class-variance-authority": "^0.7.1",
        "drizzle-orm": "^0.43.1",
        "lucide-react": "^0.487.0",
        "motion": "^12.9.4",
        "prettier-eslint": "^16.3.0",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-grid-layout": "^1.5.1"
    },
    "devDependencies": {
        "@eslint/js": "^9.24.0",
        "@tauri-apps/cli": "^2",
        "@types/node": "^22.14.0",
        "@types/react": "^18.3.1",
        "@types/react-dom": "^18.3.1",
        "@types/react-grid-layout": "^1.3.5",
        "@typescript-eslint/parser": "^8.30.1",
        "@vitejs/plugin-react": "^4.3.4",
        "drizzle-kit": "^0.31.1",
        "eslint": "^9.24.0",
        "eslint-plugin-react": "^7.37.5",
        "globals": "^16.0.0",
        "postcss": "^8.5.3",
        "postcss-preset-mantine": "^1.17.0",
        "postcss-simple-vars": "^7.0.1",
        "prettier": "^3.5.3",
        "typescript": "~5.6.2",
        "typescript-eslint": "^8.29.0",
        "vite": "^6.0.3"
    }
}
</file>

</files>
